// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// model User {
//   id           Int            @id @default(autoincrement())
//   email        String         @unique
//   firstName    String
//   lastName     String
//   password     String
//   dob          String
//   createdAt    DateTime       @default(now())
//   updatedAt    DateTime       @updatedAt
//   Organization Organization[]
// }

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id               String         @id @default(cuid())
  firstName        String?
  lastName         String?
  email            String?        @unique
  password         String
  emailVerified    Boolean        @default(false)
  emailVerificationToken String?
  emailVerificationTokenExpires DateTime?
  image            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  accounts         Account[]
  sessions         Session[]
  stripeCustomerId String?        @unique
  subscriptionId   String?
  isActive         Boolean        @default(false)
  trial_end        DateTime
  Organization     Organization[]
  chats            Chat[]      
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Organization {
  id          String   @id @default(cuid())
  name        String
  description String?
  owner       User     @relation(fields: [owner_id], references: [id])
  owner_id    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
model Chat {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  user      User      @relation(fields: [user_id], references: [id])
  user_id   String
  messages  Message[] // Messages sent by users and chatbot
}

model Message {
  id        String    @id @default(cuid())
  chat      Chat      @relation(fields: [chat_id], references: [id])
  chat_id   String
  text      String?   @db.Text
  role      String    // Role of the sender: 'user' or 'chatbot'
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([chat_id, createdAt])
}